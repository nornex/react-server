- name: Get current inventory
  hosts: tag_Name_react_server_box
  user: ubuntu
  tasks:
    - action: ec2_facts

    - name: Add existing hosts to group
      group_by: key=existing_hosts

- name: Launch instances
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: Provision a set of instances
      ec2:
         key_name: walkscore_base_keypair2
         group: react-server
         instance_type: t2.medium
         image: ami-d732f0b7
         region: us-west-2
         vpc_subnet_id: subnet-d94db0ae
         assign_public_ip: yes
         instance_profile_name: react-server-box
         wait: yes
         exact_count: 2
         count_tag:
            Name: react-server-box
         instance_tags:
            Name: react-server-box
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=react-server-box-hosts
      with_items: '{{ ec2.instances }}'

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=5 timeout=320 state=started
      with_items: '{{ ec2.instances }}'

- name: Configuration
  hosts: react-server-box-hosts
  user: ubuntu

  tasks:
    - name: Gather facts about instances
      action: ec2_facts

    - name: Set up instance packages
      script: instance-setup.sh

    - name: Install React Server Slack API tokens
      script: decrypt_credentials.py -k react-server-slack.api.token > react-server-slack-api-token

    - name: Install Asini Slack API tokens
      script: decrypt_credentials.py -k asini-slack.api.token > asini-slack-api-token

    - name: Copy Docker Compose configuration
      copy: src=docker-compose.yml dest=/home/ubuntu/docker-compose.yml mode=0644

    - name: Copy NGINX configuration
      copy: src=../nginx.conf dest=/home/ubuntu/nginx.conf mode=0644

    - name: Deploy services
      shell: ASINI_SLACK_API_TOKEN=`cat asini-slack-api-token | tr -d '\n'` REACT_SERVER_SLACK_API_TOKEN=`cat react-server-slack-api-token | tr -d '\n'` docker-compose up -d
      become: true

    - name: Wait for the service to become available
      wait_for: port=80 delay=5

    - name: Register instances with load balancer
      local_action:
        module: ec2_elb
        instance_id: '{{ ansible_ec2_instance_id }}'
        ec2_elbs: react-server-io
        region: us-west-2
        state: present
        wait: no

    - name: Give ELB time to put new instance into service
      pause: seconds=30

- name: Stop old hosts
  hosts: existing_hosts
  connection: local
  user: ubuntu

  tasks:
    - action: ec2_facts

    - name: Terminate instance
      local_action:
        module: ec2
        state: 'absent'
        region: us-west-2
        instance_id: '{{ ansible_ec2_instance_id }}'
